generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  fullName    String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  campaigns   Campaign[]
  contacts    Contact[]
  emailEvents EmailEvent[]
  groups      Group[]
  sentEmails  SentEmail[]
  templates   Template[]
}

model Group {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  contacts  Contact[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String       @id @default(uuid())
  name        String
  email       String
  tags        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  groupId     String?
  group       Group?       @relation(fields: [groupId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEvents EmailEvent[]
  sentEmails  SentEmail[]
}

model Template {
  id        String   @id @default(uuid())
  name      String
  subject   String?
  blocks    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id          String       @id @default(uuid())
  name        String
  subject     String
  sender      String
  group       String
  blocks      Json
  status      String       @default("draft")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  groupId     String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEvents EmailEvent[]
  sentEmails  SentEmail[]
}

model SentEmail {
  id           String   @id @default(uuid())
  messageId    String
  contactEmail String
  sentAt       DateTime @default(now())
  status       String   @default("sent")
  campaignId   String
  userId       String
  contactId    String
  contact      Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailEvent {
  id           String   @id @default(uuid())
  eventType    String
  messageId    String
  contactEmail String
  timestamp    DateTime @default(now())
  metadata     Json?
  campaignId   String
  userId       String
  contactId    String
  contact      Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}
