// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  contacts  Contact[]
  templates Template[]
  campaigns Campaign[]
  sentEmails SentEmail[]
  emailEvents EmailEvent[]
  groups    Group[]
}

model Group {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  contacts  Contact[]
}

model Contact {
  id     String  @id @default(uuid())
  name   String
  email  String
  tags   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  group  Group?  @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId String?
  sentEmails SentEmail[]
  emailEvents EmailEvent[]
}

model Template {
  id      String   @id @default(uuid())
  name    String
  subject String?
  blocks  Json     // Store the email blocks as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
}

model Campaign {
  id       String   @id @default(uuid())
  name     String
  subject  String
  sender   String
  group    String   // Group name for display
  groupId  String?  // Group UUID for relation
  blocks   Json     // Store the email blocks as JSON
  status   String   @default("draft") // draft, scheduled, sent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  sentEmails SentEmail[]
  emailEvents EmailEvent[]
}

model SentEmail {
  id        String   @id @default(uuid())
  messageId String   // Resend API message ID
  contactEmail String
  sentAt    DateTime @default(now())
  status    String   @default("sent") // sent, delivered, opened, clicked, failed
  
  // Relations
  campaign  Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String
}

model EmailEvent {
  id          String   @id @default(uuid())
  eventType   String   // sent, delivered, opened, clicked, bounced, complained
  messageId   String   // Resend API message ID
  contactEmail String
  timestamp   DateTime @default(now())
  metadata    Json?    // Additional event data
  
  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId   String
}
